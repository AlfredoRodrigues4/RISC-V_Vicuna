
;; Function main (main, funcdef_no=0, decl_uid=120395, cgraph_uid=1, symbol_order=1) (executed once)


Analyzing loop at test.c:63
test.c:63:23: note:  === analyze_loop_nest ===
test.c:63:23: note:   === vect_analyze_loop_form ===
test.c:63:23: note:   using as main loop exit: 4 -> 5 [AUX: (nil)]
test.c:63:23: note:    === get_loop_niters ===
test.c:63:23: note:    Loop has 1 exits.
test.c:63:23: note:    Analyzing exit 0...
Analyzing # of iterations of loop 2
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
test.c:63:23: note:    All loop exits successfully analyzed.
Creating dr for array[i_38]
analyze_innermost: success.
	base_address: &array
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	base alignment: 4
	base misalignment: 0
	offset alignment: 128
	step alignment: 1
	base_object: array
	Access function 0: {0, +, 1}_2
Creating dr for target[i_38]
analyze_innermost: success.
	base_address: &target
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	base alignment: 4
	base misalignment: 0
	offset alignment: 128
	step alignment: 1
	base_object: target
	Access function 0: {0, +, 1}_2
test.c:64:9: missed:  statement clobbers memory: uart_printf ("%d * 5 + 7 = %d\n", _4, _6);
test.c:63:23: missed:  not vectorized: loop contains function calls or data references that cannot be analyzed
test.c:63:23: note:  ***** Analysis  failed with vector mode VOID
test.c:63:23: note:  ***** The result for vector mode RVVM1QI would be the same
test.c:63:23: note:  ***** The result for vector mode RVVMF2QI would be the same
test.c:63:23: note:  ***** The result for vector mode RVVMF4QI would be the same
test.c:63:23: note:  ***** The result for vector mode V4QI would be the same
test.c:63:23: note:  ***** The result for vector mode V2QI would be the same
test.c:63:23: note:  ***** The result for vector mode V1QI would be the same
test.c:63:23: missed: couldn't vectorize loop

Analyzing loop at test.c:56
test.c:56:35: note:  === analyze_loop_nest ===
test.c:56:35: note:   === vect_analyze_loop_form ===
test.c:56:35: note:   using as main loop exit: 3 -> 6 [AUX: (nil)]
test.c:56:35: note:    === get_loop_niters ===
test.c:56:35: note:    Loop has 1 exits.
test.c:56:35: note:    Analyzing exit 0...
test.c:56:35: note:    All loop exits successfully analyzed.
test.c:56:35: missed:   not vectorized: number of iterations cannot be computed.
test.c:56:35: missed:  bad loop form.
test.c:56:35: missed: couldn't vectorize loop
test.c:52:5: note: vectorized 0 loops in function.
int main ()
{
  int i;
  vint8m1_t vec;
  int n;
  size_t vl;
  int8_t * dst;
  int8_t * src;
  int8_t target[16];
  unsigned int n.0_1;
  unsigned int _2;
  signed char _3;
  int _4;
  signed char _5;
  int _6;
  unsigned int i.2_7;
  unsigned int ivtmp_13;
  unsigned int ivtmp_29;

  <bb 2> [local count: 63136016]:
  uart_printf ("Hello World from Vicuna!\n");

  <bb 3> [local count: 510827769]:
  # src_35 = PHI <src_26(8), &array(2)>
  # dst_36 = PHI <dst_27(8), &target(2)>
  # n_37 = PHI <n_25(8), 16(2)>
  n.0_1 = (unsigned int) n_37;
  vl_20 = __riscv_vsetvl_e8m1 (n.0_1);
  vec_21 = __riscv_vle8_v_i8m1 (src_35, vl_20);
  vec_22 = __riscv_vmul_vx_i8m1 (vec_21, 5, vl_20);
  vec_23 = __riscv_vadd_vx_i8m1 (vec_22, 7, vl_20);
  __riscv_vse8_v_i8m1 (dst_36, vec_23, vl_20);
  _2 = n.0_1 - vl_20;
  n_25 = (int) _2;
  src_26 = src_35 + vl_20;
  dst_27 = dst_36 + vl_20;
  if (n_25 > 0)
    goto <bb 8>; [87.64%]
  else
    goto <bb 6>; [12.36%]

  <bb 8> [local count: 447691752]:
  goto <bb 3>; [100.00%]

  <bb 6> [local count: 63136017]:

  <bb 4> [local count: 1010605808]:
  # i_38 = PHI <i_19(7), 0(6)>
  # ivtmp_29 = PHI <ivtmp_13(7), 16(6)>
  _3 = array[i_38];
  _4 = (int) _3;
  _5 = target[i_38];
  _6 = (int) _5;
  uart_printf ("%d * 5 + 7 = %d\n", _4, _6);
  i_19 = i_38 + 1;
  i.2_7 = (unsigned int) i_19;
  ivtmp_13 = ivtmp_29 - 1;
  if (ivtmp_13 != 0)
    goto <bb 7>; [93.75%]
  else
    goto <bb 5>; [6.25%]

  <bb 7> [local count: 947469796]:
  goto <bb 4>; [100.00%]

  <bb 5> [local count: 63136016]:
  __asm__ __volatile__("jr x0");
  target ={v} {CLOBBER(eos)};
  return 0;

}


